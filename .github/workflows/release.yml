name: Release

on:
  # push:
  #   branches: [stable, next, development]
  pull_request:
    branches: [stable, next, development]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: ./.github/workflows/common

  format_code:
    name: Format Code
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: lint-code
        name: Lint Code
        run: bun run lint:code
        shell: bash

  lint_code:
    name: Lint Code
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: lint_code
        name: Lint Code
        run: bun run lint:code
        shell: bash

  lint_knip:
    name: Lint Knip
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: lint_knip
        name: Lint Knip
        run: bun run lint:knip --reporter markdown
        shell: bash

  lint_markdown:
    name: Lint Markdown
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: lint_markdown
        name: Lint Markdown
        run: bun run lint:md
        shell: bash

  lint_cspell:
    name: Lint CSpell
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: lint_cspell
        name: Lint CSpell
        run: bun run lint:cspell
        shell: bash

  check_types:
    name: Check Types
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/get-repo-cache
      - id: check_types
        name: Check Types
        run: bun tsc --noEmit
        shell: bash

      # - name: Import GPG key
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     passphrase: ${{ secrets.GPG_PASSPHRASE }}
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     git_config_global: true
      #     git_commit_gpgsign: true
      #     git_committer_name: "GitHub Actions Bot"
      #     git_committer_email: "aditya.borkar.programs+github.actions@gmail.com"
      #     git_push_gpgsign: false
      #     git_tag_gpgsign: true
      #     git_user_signingkey: true

      # - name: Commit changes (if any)
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     if [ -n "$(git status --porcelain)" ]; then
      #       git add .
      #       git commit -S -m "chore: automated changes by github actions" || echo "No changes to commit"
      #       git pull --rebase origin ${{ github.head_ref }}
      #       git push --force-with-lease origin HEAD:${{ github.head_ref }}
      #     fi
      #   # git push origin HEAD:${{ github.head_ref }}
            
      # - name: Comment on PR
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `
      #           ## Formatting

      #           ${context.steps['format-code'].outcome === 'success' 
      #             ? 'Formatting done successfully.'
      #             : `Formatting failed. Output:\n\n${context.steps['format-code'].outputs.stdout}`}

      #           ## Linting

      #           ### Code

      #           ${context.steps['lint-code'].outcome === 'success' 
      #             ? 'Linting passed successfully.'
      #             : `Linting failed. Output:\n\n${context.steps['lint-code'].outputs.stdout}`}

      #           ### Markdown

      #           ${context.steps['lint-markdown'].outcome === 'success' 
      #             ? 'Markdown linting passed successfully.'
      #             : `Markdown linting failed. Output:\n\n${context.steps['lint-markdown'].outputs.stdout}`}

      #           ### Cspell

      #           ${context.steps['lint-cspell'].outcome === 'success' 
      #             ? 'Cspell linting passed successfully.'
      #             : `Cspell linting failed. Output:\n\n${context.steps['lint-cspell'].outputs.stdout}`}

      #           ### Knip

      #           ${context.steps['lint-knip'].outcome === 'success' 
      #             ? 'Knip linting passed successfully.'
      #             : `Knip linting failed. Output:\n\n${context.steps['lint-knip'].outputs.stdout}`}
      #       `
      #       })

      # - name: Build Packages
      #   if: github.event_name == 'push'
      #   run: |
      #     bun nx reset
      #     bun run build
      #   # Print docs
      #   # check docs is written + lint them
      #   # docs codegen

      # - name: Pre-Release
      #   if: github.ref == 'refs/heads/next'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git add .
      #     git commit -m "chore(release): {version}"
      #     bun nx release --dry-run

      # - name: Stable Release
      #   if: github.ref == 'refs/heads/stable'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git add .
      #     git commit -m "chore(release): {version}"
      #     bun nx release --dry-run