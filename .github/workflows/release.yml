name: Release Packages

on:
  release:
    types: [published]
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  issues: write
  statuses: write
  contents: write
  id-token: write
  pull-requests: write
  packages: write
  deployments: write

jobs:
  publish:
    if: github.event.release.tag_name == 'trigger.release'
    name: Publish Packages
    runs-on: ubuntu-latest
    outputs:
      versioning: ${{ steps.versioning.outputs.bash }}
      # changelog: ${{ steps.changelog.outputs.bash }}
      publishing: ${{ steps.publishing.outputs.bash }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
      - id: versioning
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun nx release --skip-publish --first-release --projects=packages/* ${{ github.event.release.target_commitish == 'canary' && '--preid=canary' || '' }})"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          NPM_CONFIG_PROVENANCE: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      # - id: changelog
      #   run: |
      #     {
      #       echo "bash<<EOF"
      #       echo "$(bun nx release changelog --first-release --projects=packages/*)"
      #       echo "EOF"
      #     } >> $GITHUB_OUTPUT
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     NPM_CONFIG_PROVENANCE: true
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      - id: publishing
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun nx release publish --first-release --projects=packages/*)"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          NPM_CONFIG_PROVENANCE: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      - id: delete-draft-release
        run: |
          {
            echo "bash<<EOF"
            echo "$(gh release delete 'trigger.release' --yes --cleanup-tag)"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

  deploy:
    name: Deploy Website
    if: false
    runs-on: ubuntu-latest
    outputs:
      bash: ${{ steps.deploy.outputs.bash }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
      - id: deploy
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun run deploy)"
            echo "EOF"
          } >> $GITHUB_OUTPUT


  workflow_status:
    name: Workflow status
    needs: [publish, deploy]
    if: ${{ always() && !cancelled() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "## ${{ needs.publish.result == 'success' && '‚úÖ' || '‚ùå' }} Publish Packages" >> $GITHUB_STEP_SUMMARY
          echo "```bash\n${{ needs.publish.outputs.versioning }}\n```" >> $GITHUB_STEP_SUMMARY
          echo "```bash\n${{ needs.publish.outputs.publishing }}\n```" >> $GITHUB_STEP_SUMMARY
          echo "## ${{ needs.deploy.result == 'success' && '‚úÖ' || '‚ùå' }} Deploy Website" >> $GITHUB_STEP_SUMMARY
          echo "```bash\n${{ needs.deploy.outputs.bash }}\n```" >> $GITHUB_STEP_SUMMARY
      # - uses: marocchino/sticky-pull-request-comment@v2
      #   with:
      #     header: pr-status-checks
      #     message: |
      #       ## ü§ñ Release Summary ‚ÑπÔ∏è
      #       <sup>This comment is automatically generated and will be overwritten every time changes are committed to this branch.</sup>
      
      #       ## üì¶ Package Changes
      
      #       <sup>Version numbers are subject to change until the release is published.</sup>
            
      #       ### @letsync/core (v0.1.0)
      
      #       | Metric | Value | Change |
      #       | --- | --- | --- |
      #       | Package Size (Uncompressed) | 100MB | +10% |
      #       | Package Size (Gzipped) | 100MB | +10% |
      #       | Test Coverage | 90% | +0% |
      
      #       **Changelog:**
      #         - Ok
      #         - Dokey
      
      #       <details>
      #         <summary>**Release Notes**</summary>
      
      #         Written notes here about the release in MDX format. Get inspiration from React Native Blogs and Medusa Changelogs.
      #       </details>
      
      #       ### @letsync/cli (v0.1.0-next.2)
      
      #       | Metric | Value | Change |
      #       | --- | --- | --- |
      #       | Package Size (Uncompressed) | 100MB | +10% |
      #       | Package Size (Gzipped) | 100MB | +10% |
      #       | Test Coverage | 90% | +0% |
      
      #       **Changelog:**
      #         - Ok
      #         - Dokey
      
      #       <details>
      #         <summary>**Release Notes**</summary>
      
      #         Written notes here about the release in MDX format. Get inspiration from React Native Blogs and Medusa Changelogs.
      #       </details>
      
      #       ## üìñ Documentation Changes
      
      #       Preview Deployment: [link](...)
      
      #       **Changelog:**
      #         - Ok
      #         - Dokey
