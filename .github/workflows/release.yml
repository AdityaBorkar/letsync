name: Release

on:
  pull_request:
    branches: [stable, next]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: write
  statuses: write
  issues: write

jobs:
  format_code:
    name: Format Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: format_code
        name: Format Code
        run: bun run format
        shell: bash
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_config_global: true
          git_commit_gpgsign: true
          git_committer_name: "GitHub Actions Bot"
          git_committer_email: "aditya.borkar.programs+github.actions@gmail.com"
          git_push_gpgsign: false
          git_tag_gpgsign: true
          git_user_signingkey: true
      - name: Commit changes (if any)
        if: github.event_name == 'pull_request'
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -S -m "chore: automated changes by github actions" || echo "No changes to commit"
            git pull --rebase origin ${{ github.head_ref }}
            git push --force-with-lease origin HEAD:${{ github.head_ref }}
          fi
    outputs:
      shell_output: ${{ steps.format_code.outcome }}

  lint_code:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: lint_code
        name: Lint Code
        run: bun run lint:code
        shell: bash
    outputs:
      shell_output: ${{ steps.lint_code.outcome }}

  lint_knip:
    name: Lint Knip
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: lint_knip
        name: Lint Knip
        run: bun run lint:knip --reporter markdown
        shell: bash
    outputs:
      shell_output: ${{ steps.lint_knip.outcome }}

  lint_markdown:
    name: Lint Markdown
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: lint_markdown
        name: Lint Markdown
        run: bun run lint:md
        shell: bash
    outputs:
      shell_output: ${{ steps.lint_markdown.outcome }}

  lint_cspell:
    name: Lint CSpell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: lint_cspell
        name: Lint CSpell
        run: bun run lint:cspell
        shell: bash
    outputs:
      shell_output: ${{ steps.lint_cspell.outcome }}

  check_types:
    name: Check Types
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
        shell: bash
      - id: check_types
        name: Check Types
        run: bun run typecheck
        shell: bash
    outputs:
      shell_output: ${{ steps.check_types.outcome }}

  comment_results:
    name: Comment Results
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const botCommentMarker = '<!-- PR-STATUS-COMMENT -->';

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.data.find(comment => 
              comment.body.includes(botCommentMarker)
            );

            const body = `${botCommentMarker}
            ## GitHub Actions Results
            
            ### ${context.needs.format_code.result === 'success' ? '✅' : '❌'} Formatting
            
            ${context.needs.format_code.outputs.shell_output}
            
            ### ${context.needs.lint_code.result === 'success' ? '✅' : '❌'} Linting - Code
            ${context.needs.lint_code.outputs.shell_output}
            
            ### ${context.needs.lint_knip.result === 'success' ? '✅' : '❌'} Linting - Knip
            ${context.needs.lint_knip.outputs.shell_output}
            
            ### ${context.needs.lint_markdown.result === 'success' ? '✅' : '❌'} Linting - Markdown
            ${context.needs.lint_markdown.outputs.shell_output}
            
            ### ${context.needs.lint_cspell.result === 'success' ? '✅' : '❌'} Linting - Cspell
            ${context.needs.lint_cspell.outputs.shell_output}

            ### ${context.needs.check_types.result === 'success' ? '✅' : '❌'} Types
            ${context.needs.check_types.outputs.shell_output}
            
            _Last updated: ${new Date().toUTCString()}_`;

            if (botComment)
              await github.rest.issues.updateComment({ owner, repo, body, comment_id: botComment.id });
            else
              await github.rest.issues.createComment({ owner, repo, body, issue_number: context.issue.number });

  # build_release:
  #   name: Build Release
  #   if: github.event_name == 'push'
  #   needs: [setup, format_code, lint_code, lint_markdown, lint_cspell, lint_knip, check_types]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Build Packages
  #       run: |
  #         bun nx reset
  #         bun run build
  #       # Print docs
  #       # check docs is written + lint them
  #       # docs codegen
  #     - name: Pre-Release
  #       if: github.ref == 'refs/heads/next'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         git add .
  #         git commit -m "chore(release): {version}"
  #         bun nx release --dry-run
  #     - name: Stable Release
  #       if: github.ref == 'refs/heads/stable'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         git add .
  #         git commit -m "chore(release): {version}"
  #         bun nx release --dry-run
