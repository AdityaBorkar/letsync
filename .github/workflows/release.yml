name: Release Packages

on:
  release:
    types: [published]
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  issues: write
  statuses: write
  contents: write
  id-token: write
  pull-requests: write
  packages: write
  deployments: write

jobs:
  publish:
    if: github.event.release.tag_name == 'trigger.release'
    name: Publish Packages
    runs-on: ubuntu-latest
    outputs:
      versioning: ${{ steps.versioning.outputs.bash }}
      publishing: ${{ steps.publishing.outputs.bash }}
      fetch-tags: ${{ steps.fetch-tags.outputs.bash }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: oven-sh/setup-bun@v2
      - shell: bash
        run: bun install
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_config_global: true
          git_commit_gpgsign: true
          git_committer_name: "GitHub Actions Bot"
          git_committer_email: "aditya.borkar.programs+github.actions@gmail.com"
          git_push_gpgsign: false
          git_tag_gpgsign: true
          git_user_signingkey: true
      - shell: bash
        run: |
          npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_ACCESS_TOKEN }}
          npm config set '//npm.pkg.github.com/:_authToken' ${{ secrets.GITHUB_TOKEN }}
      - shell: bash
        id: fetch-tags
        run: |
          {
            echo "bash<<EOF"
            echo "$(git fetch --tags --all --verbose)"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - id: versioning
        shell: bash
        env:
          CI: true
          GH_TOKEN: ${{ github.token }}
          NPM_CONFIG_PROVENANCE: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun nx release --skip-publish --projects=packages/* ${{ github.event.release.target_commitish == 'canary' && '--preid=canary' || '' }})"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - id: publishing
        # TODO - DO NOT RUN IF PREVIOUS STEP FAILED
        # TODO - FAIL STEPS IF OUTPUT FAILS
        shell: bash
        env:
          CI: true
          GH_TOKEN: ${{ github.token }}
          NPM_CONFIG_PROVENANCE: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun nx release publish --projects=packages/*)"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - id: delete-draft-release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          {
            echo "bash<<EOF"
            echo "$(gh release delete 'trigger.release' --yes --cleanup-tag)"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Website
    if: false
    runs-on: ubuntu-latest
    outputs:
      bash: ${{ steps.deploy.outputs.bash }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
      - id: deploy
        shell: bash
        run: |
          {
            echo "bash<<EOF"
            echo "$(bun run deploy)"
            echo "EOF"
          } >> $GITHUB_OUTPUT


  workflow_status:
    name: Workflow status
    needs: [publish, deploy]
    if: ${{ always() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - shell: bash
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Fetching tags:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.publish.outputs.fetch-tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ${{ needs.publish.result == 'success' && '✅' || '❌' }} Publish Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Versioning:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.publish.outputs.versioning }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Publishing:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.publish.outputs.publishing }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ${{ needs.deploy.result == 'success' && '✅' || '❌' }} Deploy Website" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deploying:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.deploy.outputs.bash }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
